package com.itvrach.www.itvrach;

import android.app.DatePickerDialog;
import android.content.Intent;
import android.provider.ContactsContract;
import android.support.v4.app.DialogFragment;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.DatePicker;
import android.widget.EditText;
import android.widget.ImageButton;
import android.widget.Toast;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;

import com.itvrach.entities.ResponseModel;
import com.itvrach.entities.User;
import com.itvrach.services.APIClient;
import com.itvrach.services.UserService;
import com.itvrach.www.itvrach.DatePickerFragment;

import retrofit2.Call;
import retrofit2.Callback;
import retrofit2.Response;

import static com.itvrach.www.itvrach.R.id.buttonSave;
import static com.itvrach.www.itvrach.R.id.buttonCancel;
import static com.itvrach.www.itvrach.R.id.editTextFirstname;
import static com.itvrach.www.itvrach.R.id.editTextPassword;
import static com.itvrach.www.itvrach.R.id.editTextUsername;
import static com.itvrach.www.itvrach.R.id.editTextType;

public class SignUpActivity extends AppCompatActivity implements DatePickerDialog.OnDateSetListener{
    private EditText editTextUsername, editTextPassword, editTextType, editTextFirstname, editTextLastname, editTextFullname, editTextEmail;
    private Button buttonSave, buttonCancel;
    private String username, password, type, firstname, lastname, fullname, email;
    private Calendar calendar;
    private SimpleDateFormat simpleDateFormat;
    private SimpleDateFormat simpleDateFormat1;
    private SimpleDateFormat simpleDateFormat2;


    private String Date;
    private String Time;
    private EditText editTextCreatedDate, editTextCreatedTime;
    private EditText editTextUPdateDates;

    private ImageButton ImgButton, ImgButtonTime, ImgButtonUpdate;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_sign_up);

        editTextUsername    = (EditText) findViewById(R.id.editTextUsername);
        editTextPassword    = (EditText) findViewById(R.id.editTextPassword);
        editTextType        = (EditText) findViewById(R.id.editTextType);
        editTextFirstname   = (EditText) findViewById(R.id.editTextFirstname);

        editTextLastname    = (EditText) findViewById(R.id.editTextLastname);
        editTextFullname    = (EditText) findViewById(R.id.editTextFullname);
        editTextEmail       = (EditText) findViewById(R.id.editTextEmail);

        editTextCreatedDate = (EditText) findViewById(R.id.editTextCreatedDate);

        editTextCreatedTime = (EditText) findViewById(R.id.editTextCreatedTime);
        editTextUPdateDates = (EditText) findViewById(R.id.editTextUPdateDates);

        calendar = Calendar.getInstance();
        simpleDateFormat = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss");

        simpleDateFormat1 = new SimpleDateFormat("HH:mm:ss");
        simpleDateFormat2 = new SimpleDateFormat("dd-MM-yyyy");

        Date = simpleDateFormat.format(calendar.getTime());
      //  editTextCreatedDate.setText(Date);
        Time = simpleDateFormat1.format(calendar.getTime());
        //editTextCreatedTime.setText(Time);

        ImgButton = (ImageButton) findViewById(R.id.ImgButton);
        ImgButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                editTextCreatedDate.setText(Date);
            }
        });

        ImgButtonTime  = (ImageButton) findViewById(R.id.ImgButtonTime);
        ImgButtonTime.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                editTextCreatedTime.setText(Time);
            }
        });

        ImgButtonUpdate = (ImageButton) findViewById(R.id.ImgButtonUpdate);
        ImgButtonUpdate.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                DialogFragment datePicker = new DatePickerFragment();
                datePicker.show(getSupportFragmentManager(),"date picker");
            }
        });



        buttonSave = (Button) findViewById(R.id.buttonSave);
        buttonSave.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                username  = editTextUsername.getText().toString();
                password  = editTextPassword.getText().toString();
                type      = editTextType.getText().toString();
                firstname = editTextFirstname.getText().toString();
                lastname  = editTextLastname.getText().toString();
                fullname  = editTextFullname.getText().toString();
                email     = editTextEmail.getText().toString();

                if(validateRegister(username, password, type, firstname, lastname, fullname, email)){
                    doRegister(username, password, type, firstname, lastname, fullname, email);
                }
            }
            });


        buttonCancel = (Button) findViewById(R.id.buttonCancel);

        buttonCancel.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                Intent intent = new Intent (SignUpActivity.this, MainActivity.class);
                startActivity(intent);
            }
        });
    }

    public void onDateSet(DatePicker view, int year, int month, int dayOfMonth){
        Calendar c = Calendar.getInstance();
        c.set(Calendar.YEAR, year);
        c.set(Calendar.MONTH, month);
        c.set(Calendar.DAY_OF_MONTH, dayOfMonth);
       // c.set(Calendar.HOUR_OF_DAY, hour);
        //c.set(Calendar.MINUTE, minute);
        //c.set(Calendar.SECOND, second);
        //String currentDateString = DateFormat.getDateInstance(DateFormat.DATE_FIELD).format(c.getTime());
        String currentDateString = simpleDateFormat2.format(c.getTime());
        editTextUPdateDates.setText(currentDateString);
    }



    private void doRegister(final String username, final String password, final String type, final String firstname, final String lastname, final String fullname, final String email){
        User user = new User();

        UserService userService = APIClient.getClient().create(UserService.class);
        Call<ResponseModel> call = userService.create(user);
        call.enqueue(new Callback<ResponseModel>() {

            @Override
            public void onResponse(Call<ResponseModel> call, Response<ResponseModel> response) {
               // if (response.isSuccessful()) {
                    ResponseModel responModel = response.body();
                    if (responModel.getStatus().equals("true")) {
                        Toast.makeText(SignUpActivity.this, "Register SuccessFully", Toast.LENGTH_SHORT).show();
                        Intent intent = new Intent(SignUpActivity.this, MainActivity.class);
                        startActivity(intent);
                    } else {
                        Toast.makeText(SignUpActivity.this, "Register UnsuccessFully!", Toast.LENGTH_SHORT).show();
                    }


               // }
            }

            @Override
            public void onFailure(Call<ResponseModel> call, Throwable t) {
                Toast.makeText(SignUpActivity.this, t.getMessage(), Toast.LENGTH_SHORT).show();
            }
        });
    }
    /* End void doLogin */

    private Boolean validateRegister(
        String username, String password, String type,
        String firstname, String lastname,String fullname, String email){
        if(username == null || username.trim().length() ==0){
            Toast.makeText(this, "Username is required", Toast.LENGTH_SHORT).show();
            return false;
        }
        if(password == null || password.trim().length() ==0){
            Toast.makeText(this, "Password is required", Toast.LENGTH_SHORT).show();
            return false;
        }
        if(type == null || type.trim().length() ==0){
            Toast.makeText(this, "Type is required", Toast.LENGTH_SHORT).show();
            return false;
        }
        if(firstname == null || firstname.trim().length() ==0){
            Toast.makeText(this, "Firstname is required", Toast.LENGTH_SHORT).show();
            return false;
        }
        if(lastname == null || lastname.trim().length() ==0){
            Toast.makeText(this, "Lastname is required", Toast.LENGTH_SHORT).show();
            return false;
        }
        if(fullname == null || fullname.trim().length() ==0){
            Toast.makeText(this, "Fullname is required", Toast.LENGTH_SHORT).show();
            return false;
        }
        if(email == null || email.trim().length() ==0){
            Toast.makeText(this, "Email is required", Toast.LENGTH_SHORT).show();
            return false;
        }
        return true;
    }

}
